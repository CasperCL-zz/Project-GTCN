package com.uis;

import com.upload.HEXUploader;
import com.upload.SystemConstants;
import com.view.Menu;
import java.util.Enumeration;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 * This menu is used to select a COM port.
 *
 * @version 2.8
 * @author Casper
 */
public class COMSelector extends Menu implements SystemConstants {

    // A model is used to easily add items to the JComboBox
    private DefaultComboBoxModel model;
    // The JFrame object is used to control the running GUI, improving preformance.
    private ModeMenu subMenuController;
    // The available COM ports
    Enumeration COMPorts;

    /**
     * Creates new form COMSelector without loading any COM-ports.
     */
    public COMSelector() {
        initComponents();
        setScreen();
    }

    /**
     * Creates new form COMSelector with loading the COM-ports.
     *
     * @param ob that is the controller of the SubMenuModeSelection class
     */
    public COMSelector(ModeMenu ob) {
        initComponents();
        setScreen();
        subMenuController = ob;
        fillComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        uploadButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        refreshComboButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("COM Selector");
        setResizable(false);

        uploadButton.setText("Okay");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("<html><h2>COM Selector");

        jLabel2.setText("Selecteer de juiste COM poort voor het uploaden.");

        refreshComboButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/resources/Refresh.png"))); // NOI18N
        refreshComboButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshComboButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Help!?");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(refreshComboButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(uploadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(16, 16, 16)))
                .addGap(10, 10, 10))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton2, uploadButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox1)
                    .addComponent(refreshComboButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uploadButton)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method retreives the selected COM port and triggers the
     * difficultyController to upload the file via that COM port
     *
     * @param evt generated by the user
     */
    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        // Close this menu, since it is no longer necessary.
        dispose();

        // Retreive some info
        String COMport = (String) jComboBox1.getSelectedItem();
        String subMenuName = "Mode";
        String selectedMode = subMenuController.getSelectedMode();

        // Last check
        // Ask for permission to the user.
        String message = "Weet u zeker dat u de PlayPillow naar " + selectedMode + " wilt bijstellen?";
        int option = javax.swing.JOptionPane.showConfirmDialog(this, message, subMenuName + " Veranderen", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.CANCEL_OPTION || option == -1) {
            System.out.println("Stopped");
            return;
        }

        // Upload
        (new HEXUploader(COMport)).upload(this, selectedMode);
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void refreshComboButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshComboButtonActionPerformed
        // TODO add your handling code here:
        refreshPorts();
    }//GEN-LAST:event_refreshComboButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        new HelpMenu(this).setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * This method displays the available COM ports in the JComboBox.
     *
     */
    public void fillComboBox() {
        model = new DefaultComboBoxModel();
        jComboBox1.setModel(model);


        try {
            COMPorts = gnu.io.CommPortIdentifier.getPortIdentifiers();
        } catch (java.lang.UnsatisfiedLinkError exc) {  // An UnsatisfiedLinkError is mainly thrown when the RXTXCommDriver cannot find the rxtxSerial.dll
            System.out.println(exc);
            JOptionPane.showMessageDialog(this, "Het lijkt er op dat u het bestand 'rxtxSerial.dll' nog niet heeft kopieer of dat deze corrupt is geraakt.\n"
                    + "Kopieer het bestand 'rxtxSerial.dll' naar " + javaLibPathWindows + " en herstart het programma.\nHet bestand 'rxtxSerial.dll' kunt "
                    + "u op de installatie CD terugvinden.",
                    "Error: missing rxtxSerial.dll", JOptionPane.ERROR_MESSAGE);
            subMenuController.setDDLError(true);
            return;
        } catch (java.lang.NoClassDefFoundError exc) {
            // When the user tries to upload the file for a second time without the existence of the rxtxSerial.dll in the java path this error occures
            System.out.println(exc);
            JOptionPane.showMessageDialog(this, "Het lijkt er op dat u het bestand 'rxtxSerial.dll' nog niet heeft kopieer of dat deze corrupt is geraakt.\n"
                    + "Kopieer het bestand 'rxtxSerial.dll' naar " + javaLibPathWindows + " en herstart het programma.\nHet bestand 'rxtxSerial.dll' kunt "
                    + "u op de installatie CD terugvinden.",
                    "Error: missing rxtxSerial.dll", JOptionPane.ERROR_MESSAGE);
            subMenuController.setDDLError(true);
            return;
        }

        refreshPorts();
    }

    /**
     * Refreshes the availble ports and sets them in the jComboBox via the
     * model.
     *
     */
    public void refreshPorts() {
        // The elements 
        int elements = 0;
        // Remove all elements to prevent duplication
        model.removeAllElements();

        COMPorts = gnu.io.CommPortIdentifier.getPortIdentifiers();
        // Get the elements.
        while (COMPorts.hasMoreElements()) {
            gnu.io.CommPortIdentifier cpi = (gnu.io.CommPortIdentifier) COMPorts.nextElement();
            if (cpi.getPortType() == gnu.io.CommPortIdentifier.PORT_SERIAL) {
                System.out.println("Available port#1: " + cpi.getName() + " Added");
                model.addElement(cpi.getName());
            } else if (cpi.getPortType() == gnu.io.CommPortIdentifier.PORT_PARALLEL) {
                System.out.println("Available port#2: " + cpi.getName() + " Added");
                model.addElement(cpi.getName());
            }
            elements++;
        }

        if (elements == 0) {
            JOptionPane.showMessageDialog(this, "Er zijn geen COM poorten aangesloten\nZorg ervoor dat de kabel is aangesloten en druk opnieuw op 'Okay'.",
                    "Geen COM poort gevonden", JOptionPane.ERROR_MESSAGE);
            dispose();
        } else {
            setVisible(true);
        }
        System.out.println("Amount of connected ports: " + elements);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton refreshComboButton;
    private javax.swing.JButton uploadButton;
    // End of variables declaration//GEN-END:variables
}
